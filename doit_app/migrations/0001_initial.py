# Generated by Django 5.1.6 on 2025-05-31 00:27

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Categorias',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Nombre', models.CharField(max_length=50, verbose_name='Nombre de la categoría')),
            ],
            options={
                'verbose_name': 'Categoría',
                'verbose_name_plural': 'Categorías',
                'db_table': 'Categorias',
            },
        ),
        migrations.CreateModel(
            name='Departamento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Nombre', models.CharField(max_length=50, verbose_name='Nombre del departamento')),
            ],
            options={
                'verbose_name': 'Departamento',
                'verbose_name_plural': 'Departamentos',
                'db_table': 'Departamento',
            },
        ),
        migrations.CreateModel(
            name='Estado',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Nombre', models.CharField(max_length=50, verbose_name='Nombre del estado')),
            ],
            options={
                'verbose_name': 'Estado',
                'verbose_name_plural': 'Estados',
                'db_table': 'Estado',
            },
        ),
        migrations.CreateModel(
            name='Genero',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=50, unique=True, verbose_name='Nombre del Género')),
            ],
            options={
                'verbose_name': 'Género',
                'verbose_name_plural': 'Géneros',
                'ordering': ['nombre'],
            },
        ),
        migrations.CreateModel(
            name='Metodo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Nombre', models.CharField(max_length=100, verbose_name='Nombre del método de pago')),
            ],
            options={
                'verbose_name': 'Método de Pago',
                'verbose_name_plural': 'Métodos de Pago',
                'db_table': 'Metodo',
            },
        ),
        migrations.CreateModel(
            name='Pais',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Nombre', models.CharField(max_length=50, verbose_name='Nombre del país')),
            ],
            options={
                'verbose_name': 'País',
                'verbose_name_plural': 'Países',
                'db_table': 'Pais',
            },
        ),
        migrations.CreateModel(
            name='TipoDoc',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Nombre', models.CharField(max_length=50, verbose_name='Nombre del tipo de documento')),
            ],
            options={
                'verbose_name': 'Tipo de Documento',
                'verbose_name_plural': 'Tipos de Documento',
                'db_table': 'TipoDoc',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('tipo_usuario', models.CharField(choices=[('usuario', 'Usuario Normal'), ('experto', 'Experto')], default='usuario', max_length=20, verbose_name='Tipo de Usuario')),
                ('nacionalidad', models.CharField(blank=True, max_length=100, null=True, verbose_name='Nacionalidad')),
                ('numDoc', models.CharField(blank=True, max_length=100, null=True, unique=True, verbose_name='Número de Documento')),
                ('telefono', models.CharField(blank=True, max_length=20, null=True, verbose_name='Teléfono')),
                ('fechaNacimiento', models.DateField(blank=True, null=True, verbose_name='Fecha de Nacimiento')),
                ('evidenciaTrabajo', models.CharField(blank=True, max_length=200, null=True, verbose_name='Evidencia de Trabajo')),
                ('experienciaTrabajo', models.TextField(blank=True, null=True, verbose_name='Experiencia de Trabajo')),
                ('hojaVida', models.CharField(blank=True, max_length=300, null=True, verbose_name='Hoja de Vida')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('genero', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='doit_app.genero', verbose_name='Género')),
                ('tipo_documento', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='doit_app.tipodoc', verbose_name='Tipo de Documento')),
            ],
            options={
                'verbose_name': 'Usuario Personalizado',
                'verbose_name_plural': 'Usuarios Personalizados',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Ciudad',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Nombre', models.CharField(max_length=50, verbose_name='Nombre de la ciudad')),
                ('idDepartamento', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='doit_app.departamento', verbose_name='Departamento')),
            ],
            options={
                'verbose_name': 'Ciudad',
                'verbose_name_plural': 'Ciudades',
                'db_table': 'Ciudad',
            },
        ),
        migrations.CreateModel(
            name='Pagos',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Monto', models.FloatField(verbose_name='Valor del servicio')),
                ('estado_pago_texto', models.CharField(max_length=40, verbose_name='Estado del pago (texto)')),
                ('Fecha', models.DateField(verbose_name='Fecha de pago')),
                ('idMetodo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='doit_app.metodo', verbose_name='Método de pago')),
                ('idestado', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pagos_estado', to='doit_app.estado', verbose_name='Estado del servicio')),
            ],
            options={
                'verbose_name': 'Pago',
                'verbose_name_plural': 'Pagos',
                'db_table': 'Pagos',
            },
        ),
        migrations.AddField(
            model_name='departamento',
            name='idPais',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='doit_app.pais', verbose_name='País'),
        ),
        migrations.CreateModel(
            name='Profesion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Nombre', models.CharField(max_length=50, verbose_name='Nombre de la profesión')),
                ('Descripcion', models.CharField(max_length=100, verbose_name='Descripción de la profesión')),
                ('idUsuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
            ],
            options={
                'verbose_name': 'Profesión',
                'verbose_name_plural': 'Profesiones',
                'db_table': 'Profesion',
            },
        ),
        migrations.CreateModel(
            name='Servicios',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('NombreServicio', models.CharField(max_length=50, verbose_name='Nombre del servicio')),
                ('Precio', models.FloatField(verbose_name='Precio del servicio')),
                ('Ubicacion', models.CharField(max_length=100, verbose_name='Ubicación del experto')),
                ('Descripcion', models.CharField(max_length=150, verbose_name='Breve descripción del servicio')),
                ('Duracion', models.CharField(max_length=50, verbose_name='Duración del servicio')),
                ('idCategorias', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='doit_app.categorias', verbose_name='Categoría del servicio')),
                ('idCiudad', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='doit_app.ciudad', verbose_name='Ciudad donde se ofrece el servicio')),
                ('idPagos', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='doit_app.pagos', verbose_name='Pago del servicio')),
                ('idUsuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuario que ofrece el servicio')),
                ('idestado', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='servicios_estado', to='doit_app.estado', verbose_name='Estado del servicio')),
            ],
            options={
                'verbose_name': 'Servicio',
                'verbose_name_plural': 'Servicios',
                'db_table': 'Servicios',
            },
        ),
        migrations.CreateModel(
            name='Reserva',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Fecha', models.DateField(verbose_name='Fecha de la reserva')),
                ('Hora', models.TimeField(verbose_name='Hora de la reserva')),
                ('idEstado', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reservas_estado', to='doit_app.estado', verbose_name='Estado de la reserva')),
                ('idUsuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reservas_hechas', to=settings.AUTH_USER_MODEL, verbose_name='Usuario que hace la reserva')),
                ('idServicios', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='doit_app.servicios', verbose_name='Servicio reservado')),
            ],
            options={
                'verbose_name': 'Reserva',
                'verbose_name_plural': 'Reservas',
                'db_table': 'Reserva',
            },
        ),
        migrations.CreateModel(
            name='Calificaciones',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('puntuacion', models.CharField(max_length=50, verbose_name='Puntuación del servicio')),
                ('Comentario', models.CharField(max_length=150, verbose_name='Comentario del servicio')),
                ('Fecha', models.DateField(verbose_name='Fecha del comentario')),
                ('idUsuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='calificaciones_recibidas', to=settings.AUTH_USER_MODEL, verbose_name='Usuario que recibe la calificación')),
                ('idServicios', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='doit_app.servicios', verbose_name='Servicio calificado')),
            ],
            options={
                'verbose_name': 'Calificación',
                'verbose_name_plural': 'Calificaciones',
                'db_table': 'Calificaciones',
            },
        ),
    ]
